`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2025/03/19 11:54:46
// Design Name: 
// Module Name: tb_memory
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module tb_memory;

    parameter ADDR_WIDTH = 4, 
              DATA_WIDTH = 8;

    reg  clk; 
    reg  wr;
    reg  [ADDR_WIDTH-1:0] w_addr;
    reg  [DATA_WIDTH-1:0] w_data;
    wire [DATA_WIDTH-1:0] r_data;

    ram_ip DUT(
        .clk(clk), 
        .wr(wr),
        .w_addr(w_addr),
        .w_data(w_data),
        .r_data(r_data)
    );

    integer i;
    reg [DATA_WIDTH-1:0] rand_data;
    reg [ADDR_WIDTH-1:0] rand_addr;

    always #5 clk = ~clk;

    initial begin
        clk = 0; wr = 0; w_addr = 0; w_data = 0;

        #10;
        for (i = 0;i < 50;i = i + 1) begin
            @(posedge clk); // watch event
                rand_addr = $random%16; // random variable 16
                rand_data = $random%256;
            
            // write
            wr = 1;
            w_addr = rand_addr;
            w_data = rand_data;

            @(posedge clk);
            // read
            w_addr = rand_addr;
            #10;

            // == , !==, case (0,1,x,z)
            if(r_data === w_data) begin // compare i/o
                $display("pass");
            end
            else begin
                $display("fail addr =  %d, data = %h",w_addr,w_data);
            end
        end
        #100;
        $stop;
    end
endmodule
